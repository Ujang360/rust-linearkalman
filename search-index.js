var searchIndex = {};
searchIndex["linearkalman"] = {"doc":"This crate implements a standard linear Kalman filter and smoothing for\nvectors of arbitrary dimension. Implementation method relies on `rulinalg`\nlibrary for linear algebra computations. Most inputs and outputs rely\ntherefore on (derived) constructs from\n[rulinalg](https://athemathmo.github.io/rulinalg/doc/rulinalg/index.html)\nlibrary, in particular\n[`Vector&lt;f64&gt;`](https://athemathmo.github.io/rulinalg/doc/rulinalg/vector/struct.Vector.html)\nand\n[`Matrix&lt;f64&gt;`](https://athemathmo.github.io/rulinalg/doc/rulinalg/matrix/struct.Matrix.html)\nstructs.","items":[[3,"KalmanFilter","linearkalman","Container object with values for matrices used in the Kalman filtering\nprocedure as well as initial values for state variables.",null,null],[12,"q","","",0,null],[12,"r","","",0,null],[12,"h","","",0,null],[12,"f","","",0,null],[12,"x0","","",0,null],[12,"p0","","",0,null],[3,"KalmanState","","Container with the value of state variable and its covariance. This struct\nis used throughout all parts of Kalman procedure and may refer to predicted,\nfiltered and smoothed variables depending on the context.",null,null],[12,"x","","",1,null],[12,"p","","",1,null],[5,"predict_step","","Returns a predicted state variable mean and covariance. If prediction for\ntime `t` is desired, then `KalmanState` object with initial conditions\ncontains state mean and covariance at time `t-1` given information up to\ntime `t-1`.",null,{"inputs":[{"name":"kalmanfilter"},{"name":"kalmanstate"}],"output":{"name":"kalmanstate"}}],[5,"update_step","","Returns an updated state variable mean and covariance given predicted and\nobserved data. Typically, update step will be called after prediction step,\ndata of which will be consequently used as input in updating.",null,{"inputs":[{"name":"kalmanfilter"},{"name":"kalmanstate"},{"name":"vector"}],"output":{"name":"kalmanstate"}}],[5,"filter_step","","Returns a tuple containing updated and predicted estimates (in that order)\nof the state variable and its covariance. This function might be useful for\ncases where data is incoming and being updated in real-time so that Kalman\nfiltering is run incrementally. Note that given some initial values for `x`\nand `P`, `filter_step` makes a prediction and then runs the update step to\ncorrect the prediction based on the observed data.",null,null],[11,"fmt","","",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"filter","","Takes in measurement data and returns filtered data based on specified\n`KalmanFilter` struct. `filter` actually returns a 2-uple with the first\ncoordinate being filtered data whereas the second coordinate is the (a\npriori) prediction data that can be used later in the smoothing\nprocedure.",0,null],[11,"smooth","","Takes in output from `filter` method and returns smoothed data.\nSmoothing procedure uses not only past values as is done by `filter` but\nalso future values to better predict value of the underlying state\nvariable. Underlying algorithm is known as Rauch-Tung-Striebel smoother\nfor a fixed interval. Contrary to the filtering process, incremental\nsmoothing would require re-running Kalman filter on the entire dataset.",0,null]],"paths":[[3,"KalmanFilter"],[3,"KalmanState"]]};
searchIndex["matrixmultiply"] = {"doc":"","items":[[5,"sgemm","matrixmultiply","General matrix multiplication (f32)",null,null],[5,"dgemm","","General matrix multiplication (f64)",null,null]],"paths":[]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",6,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",6,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",7,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",8,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",9,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",10,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",11,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",11,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",11,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",11,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",11,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",11,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",11,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",11,null],[10,"swap_bytes","","Reverses the byte order of the integer.",11,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",11,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",11,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",12,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",12,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",12,null],[10,"floor","","Returns the largest integer less than or equal to a number.",12,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",12,null],[10,"trunc","","Return the integer part of a number.",12,null],[10,"fract","","Returns the fractional part of a number.",12,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",12,null],[10,"signum","","Returns a number that represents the sign of `self`.",12,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",12,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",12,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",12,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,null],[10,"powi","","Raise a number to an integer power.",12,null],[10,"powf","","Raise a number to a floating point power.",12,null],[10,"sqrt","","Take the square root of a number.",12,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,null],[10,"exp2","","Returns `2^(self)`.",12,null],[10,"ln","","Returns the natural logarithm of the number.",12,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,null],[10,"log2","","Returns the base 2 logarithm of the number.",12,null],[10,"log10","","Returns the base 10 logarithm of the number.",12,null],[11,"to_degrees","","Converts radians to degrees.",12,null],[11,"to_radians","","Converts degrees to radians.",12,null],[10,"max","","Returns the maximum of the two numbers.",12,null],[10,"min","","Returns the minimum of the two numbers.",12,null],[10,"abs_sub","","The positive difference of two numbers.",12,null],[10,"cbrt","","Take the cubic root of a number.",12,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",12,null],[10,"sin","","Computes the sine of a number (in radians).",12,null],[10,"cos","","Computes the cosine of a number (in radians).",12,null],[10,"tan","","Computes the tangent of a number (in radians).",12,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",12,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",12,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",12,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",12,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",12,null],[10,"sinh","","Hyperbolic sine function.",12,null],[10,"cosh","","Hyperbolic cosine function.",12,null],[10,"tanh","","Hyperbolic tangent function.",12,null],[10,"asinh","","Inverse hyperbolic sine function.",12,null],[10,"acosh","","Inverse hyperbolic cosine function.",12,null],[10,"atanh","","Inverse hyperbolic tangent function.",12,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",16,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",16,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",16,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",16,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",16,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",16,null],[10,"swap_bytes","","Reverses the byte order of the integer.",16,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",16,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",16,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["rawpointer"] = {"doc":"","items":[[5,"ptrdistance","rawpointer","Return the number of elements of `T` from `start` to `end`.&lt;br&gt;\nReturn the arithmetic difference if `T` is zero size.",null,null],[8,"PointerExt","","Extension methods for raw pointers",null,null],[10,"offset","","",0,null],[11,"pre_inc","","Increment the pointer by 1, and return its new value.",0,null],[11,"post_inc","","Increment the pointer by 1, but return its old value.",0,null],[11,"pre_dec","","Decrement the pointer by 1, and return its new value.",0,null],[11,"post_dec","","Decrement the pointer by 1, but return its old value.",0,null],[11,"inc","","Increment by 1",0,null],[11,"dec","","Decrement by 1",0,null],[11,"stride_offset","","Offset the pointer by `s` multiplied by `index`.",0,null]],"paths":[[8,"PointerExt"]]};
searchIndex["rulinalg"] = {"doc":"# The rulinalg crate.","items":[[0,"macros","rulinalg","Macros for the linear algebra modules.",null,null],[3,"AbsoluteElementwiseComparator","rulinalg::macros","The `abs` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[12,"tol","","The maximum absolute difference tolerated (inclusive).",0,null],[3,"ExactElementwiseComparator","","The `exact` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[3,"UlpElementwiseComparator","","The `ulp` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[12,"tol","","The maximum difference in ULP units tolerated (inclusive).",1,null],[3,"FloatElementwiseComparator","","The `float` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"compare","","",0,null],[11,"description","","",0,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"compare","","",2,null],[11,"description","","",2,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"compare","","",1,null],[11,"description","","",1,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"compare","","",3,null],[11,"description","","",3,null],[8,"ElementwiseComparator","","Trait that describes elementwise comparators for [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[10,"compare","","Compares two elements.",4,null],[10,"description","","A description of the comparator.",4,null],[0,"matrix","rulinalg","The matrix module.",null,null],[3,"Matrix","rulinalg::matrix","The `Matrix` struct.",null,null],[3,"MatrixSlice","","A `MatrixSlice`",null,null],[3,"MatrixSliceMut","","A mutable `MatrixSliceMut`",null,null],[3,"Row","","Row of a matrix.",null,null],[3,"RowMut","","Mutable row of a matrix.",null,null],[3,"Rows","","Row iterator.",null,null],[3,"RowsMut","","Mutable row iterator.",null,null],[3,"Column","","Column of a matrix.",null,null],[3,"ColumnMut","","Mutable column of a matrix.",null,null],[3,"Diagonal","","An iterator over the diagonal elements of a matrix.",null,null],[3,"DiagonalMut","","An iterator over the mutable diagonal elements of a matrix.",null,null],[3,"SliceIter","","Iterator for matrix.",null,null],[3,"SliceIterMut","","Iterator for mutable matrix.",null,null],[4,"Axes","","Matrix dimensions",null,null],[13,"Row","","The row axis.",5,null],[13,"Col","","The column axis.",5,null],[4,"DiagOffset","","Diagonal offset (used by Diagonal iterator).",null,null],[13,"Main","","The main diagonal of the matrix.",6,null],[13,"Above","","An offset above the main diagonal.",6,null],[13,"Below","","An offset below the main diagonal.",6,null],[11,"qr_decomp","","Compute the QR decomposition of the matrix.",7,null],[11,"cholesky","","Cholesky decomposition",7,null],[11,"bidiagonal_decomp","","Converts matrix to bidiagonal form",7,null],[11,"svd","","Singular Value Decomposition",7,null],[11,"upper_hessenberg","","Returns H, where H is the upper hessenberg form.",7,null],[11,"upper_hess_decomp","","Returns (U,H), where H is the upper hessenberg form\nand U is the unitary transform matrix.",7,null],[11,"lup_decomp","","Computes L, U, and P for LUP decomposition.",7,null],[11,"eigenvalues","","Eigenvalues of a square matrix.",7,null],[11,"eigendecomp","","Eigendecomposition of a square matrix.",7,null],[11,"index","","",7,null],[11,"index","","",8,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index_mut","","",7,null],[11,"index","","",10,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"index","","",12,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"div","","",8,null],[11,"div","","",8,null],[11,"div","","",9,null],[11,"div","","",9,null],[11,"add","","",8,null],[11,"add","","",8,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",9,null],[11,"sub","","",9,null],[11,"add","","",7,null],[11,"add","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"div","","",7,null],[11,"div","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"add","","",8,null],[11,"add","","",8,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"add","","",8,null],[11,"add","","",8,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",9,null],[11,"sub","","",9,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",9,null],[11,"sub","","",9,null],[11,"add","","",8,null],[11,"add","","",8,null],[11,"add","","",7,null],[11,"add","","",7,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"add","","",7,null],[11,"add","","",7,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"sub","","",9,null],[11,"sub","","",9,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"add","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add_assign","","",7,null],[11,"add_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"div_assign","","",7,null],[11,"div_assign","","",7,null],[11,"mul_assign","","",7,null],[11,"mul_assign","","",7,null],[11,"add_assign","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"div_assign","","",9,null],[11,"div_assign","","",9,null],[11,"mul_assign","","",9,null],[11,"mul_assign","","",9,null],[11,"add_assign","","",7,null],[11,"add_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"add_assign","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"add_assign","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"add_assign","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"add_assign","","",7,null],[11,"add_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"add_assign","","",7,null],[11,"add_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"neg","","",8,null],[11,"neg","","",9,null],[11,"neg","","",7,null],[11,"new","","Constructor for Matrix struct.",7,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u"}],"output":{"name":"matrix"}}],[11,"from_fn","","Constructor for Matrix struct that takes a function `f`\nand constructs a new matrix such that `A_ij = f(i, j)`,\nwhere `i` is the row index and `j` the column index.",7,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"data","","Returns a non-mutable reference to the underlying data.",7,null],[11,"mut_data","","Returns a mutable slice of the underlying data.",7,null],[11,"into_vec","","Consumes the Matrix and returns the Vec of data.",7,null],[11,"zeros","","Constructs matrix of all zeros.",7,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_diag","","Constructs matrix with given diagonal.",7,null],[11,"ones","","Constructs matrix of all ones.",7,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"identity","","Constructs the identity matrix.",7,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"mean","","The mean of the matrix along the specified axis.",7,null],[11,"variance","","The variance of the matrix along the specified axis.",7,null],[11,"solve","","Solves the equation `Ax = y`.",7,null],[11,"inverse","","Computes the inverse of the matrix.",7,null],[11,"det","","Computes the determinant of the matrix.",7,null],[11,"fmt","","Formats the Matrix for display.",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"next","","",16,null],[11,"last","","",16,null],[11,"nth","","",16,null],[11,"count","","",16,null],[11,"size_hint","","",16,null],[11,"next","","",17,null],[11,"last","","",17,null],[11,"nth","","",17,null],[11,"count","","",17,null],[11,"size_hint","","",17,null],[11,"next","","",18,null],[11,"last","","",18,null],[11,"nth","","",18,null],[11,"count","","",18,null],[11,"size_hint","","",18,null],[11,"next","","",19,null],[11,"last","","",19,null],[11,"nth","","",19,null],[11,"count","","",19,null],[11,"size_hint","","",19,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",8,null],[11,"into_iter","","",9,null],[11,"deref","","",10,null],[11,"deref","","",11,null],[11,"deref_mut","","",11,null],[11,"deref","","",12,null],[11,"deref","","",13,null],[11,"deref_mut","","",13,null],[11,"from_matrix","","Produce a `MatrixSlice` from a `Matrix`",8,null],[11,"from_raw_parts","","Creates a `MatrixSlice` from raw parts.",8,null],[11,"from_matrix","","Produce a `MatrixSliceMut` from a mutable `Matrix`",9,null],[11,"from_raw_parts","","Creates a `MatrixSliceMut` from raw parts.",9,null],[11,"rows","","",7,null],[11,"cols","","",7,null],[11,"row_stride","","",7,null],[11,"is_empty","","",7,null],[11,"as_ptr","","",7,null],[11,"into_matrix","","",7,null],[11,"sum","","",7,null],[11,"elemul","","",7,null],[11,"elediv","","",7,null],[11,"vcat","","",7,null],[11,"rows","","",8,null],[11,"cols","","",8,null],[11,"row_stride","","",8,null],[11,"as_ptr","","",8,null],[11,"rows","","",9,null],[11,"cols","","",9,null],[11,"row_stride","","",9,null],[11,"as_ptr","","",9,null],[11,"as_mut_ptr","","Top left index of the slice.",7,null],[11,"as_mut_ptr","","Top left index of the slice.",9,null],[11,"rows","","",10,null],[11,"cols","","",10,null],[11,"row_stride","","",10,null],[11,"as_ptr","","",10,null],[11,"rows","","",11,null],[11,"cols","","",11,null],[11,"row_stride","","",11,null],[11,"as_ptr","","",11,null],[11,"as_mut_ptr","","Top left index of the slice.",11,null],[11,"rows","","",12,null],[11,"cols","","",12,null],[11,"row_stride","","",12,null],[11,"as_ptr","","",12,null],[11,"rows","","",13,null],[11,"cols","","",13,null],[11,"row_stride","","",13,null],[11,"as_ptr","","",13,null],[11,"as_mut_ptr","","Top left index of the slice.",13,null],[8,"BaseMatrix","","Trait for immutable matrix structs.",null,null],[10,"rows","","Rows in the matrix.",20,null],[10,"cols","","Columns in the matrix.",20,null],[10,"row_stride","","Row stride in the matrix.",20,null],[11,"is_empty","","Returns true if the matrix contais no elements",20,null],[10,"as_ptr","","Top left index of the matrix.",20,null],[11,"as_slice","","Returns a `MatrixSlice` over the whole matrix.",20,null],[11,"get_unchecked","","Get a reference to a point in the matrix without bounds checking.",20,null],[11,"col","","Returns the column of a matrix at the given index.\n`None` if the index is out of bounds.",20,null],[11,"col_unchecked","","Returns the column of a matrix at the given\nindex without doing a bounds check.",20,null],[11,"row","","Returns the row of a matrix at the given index.",20,null],[11,"row_unchecked","","Returns the row of a matrix at the given index without doing unbounds checking",20,null],[11,"iter","","Returns an iterator over the matrix data.",20,null],[11,"row_iter","","Iterate over the rows of the matrix.",20,null],[11,"diag_iter","","Iterate over diagonal entries",20,null],[11,"sum_rows","","The sum of the rows of the matrix.",20,null],[11,"sum_cols","","The sum of the columns of the matrix.",20,null],[11,"norm","","Compute given matrix norm for matrix.",20,null],[11,"metric","","Compute the metric distance between two matrices.",20,null],[11,"sum","","The sum of all elements in the matrix",20,null],[11,"min","","The min of the specified axis of the matrix.",20,null],[11,"max","","The max of the specified axis of the matrix.",20,null],[11,"into_matrix","","Convert the matrix struct into a owned Matrix.",20,null],[11,"select_rows","","Select rows from matrix",20,null],[11,"select_cols","","Select columns from matrix",20,null],[11,"elemul","","The elementwise product of two matrices.",20,null],[11,"elediv","","The elementwise division of two matrices.",20,null],[11,"select","","Select block matrix from matrix",20,null],[11,"hcat","","Horizontally concatenates two matrices. With self on the left.",20,null],[11,"vcat","","Vertically concatenates two matrices. With self on top.",20,null],[11,"diag","","Extract the diagonal of the matrix",20,null],[11,"transpose","","Tranposes the given matrix",20,null],[11,"is_diag","","Checks if matrix is diagonal.",20,null],[11,"solve_u_triangular","","Solves an upper triangular linear system.",20,null],[11,"solve_l_triangular","","Solves a lower triangular linear system.",20,null],[11,"split_at","","Split the matrix at the specified axis returning two `MatrixSlice`s.",20,null],[11,"sub_slice","","Produce a `MatrixSlice` from an existing matrix.",20,null],[8,"BaseMatrixMut","","Trait for mutable matrices.",null,null],[10,"as_mut_ptr","","Top left index of the slice.",21,null],[11,"as_mut_slice","","Returns a `MatrixSliceMut` over the whole matrix.",21,null],[11,"get_unchecked_mut","","Get a mutable reference to a point in the matrix without bounds checks.",21,null],[11,"iter_mut","","Returns a mutable iterator over the matrix.",21,null],[11,"col_mut","","Returns a mutable reference to the column of a matrix at the given index.\n`None` if the index is out of bounds.",21,null],[11,"col_unchecked_mut","","Returns a mutable reference to the column of a matrix at the given index\nwithout doing a bounds check.",21,null],[11,"row_mut","","Returns a mutable reference to the row of a matrix at the given index.\n`None` if the index is out of bounds.",21,null],[11,"row_unchecked_mut","","Returns a mutable reference to the row of a matrix at the given index\nwithout doing a bounds check.",21,null],[11,"swap_rows","","Swaps two rows in a matrix.",21,null],[11,"swap_cols","","Swaps two columns in a matrix.",21,null],[11,"row_iter_mut","","Iterate over the mutable rows of the matrix.",21,null],[11,"diag_iter_mut","","Iterate over diagonal entries mutably",21,null],[11,"set_to","","Sets the underlying matrix data to the target data.",21,null],[11,"apply","","Applies a function to each element in the matrix.",21,null],[11,"split_at_mut","","Split the matrix at the specified axis returning two `MatrixSliceMut`s.",21,null],[11,"sub_slice_mut","","Produce a `MatrixSliceMut` from an existing matrix.",21,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"hash","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",11,null],[11,"raw_slice","","Returns the row as a slice.",10,null],[11,"raw_slice","","Returns the row as a slice.",11,null],[11,"raw_slice_mut","","Returns the row as a slice.",11,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",13,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",16,null],[11,"fmt","","",17,null],[11,"fmt","","",14,null],[11,"fmt","","",15,null],[0,"convert","rulinalg","The convert module.",null,null],[11,"from","rulinalg::matrix","",7,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"matrixslice"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"matrixslicemut"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"try_into","","Attempts to convert the matrix into a new matrix of different scalar type.",7,null],[0,"error","rulinalg","Error handling for the linalg module.",null,null],[3,"Error","rulinalg::error","An error related to the linalg module.",null,null],[4,"ErrorKind","","Types of errors produced in the linalg module.",null,null],[13,"InvalidArg","","An argument did not uphold a necessary criteria for the function.",22,null],[13,"DecompFailure","","A failure to decompose due to some property of the data.",22,null],[13,"AlgebraFailure","","A failure due to some algebraic constraints not being met.",22,null],[13,"DivByZero","","Tried to divide by zero",22,null],[13,"ScalarConversionFailure","","Failure due to inability to convert between scalar types",22,null],[11,"fmt","","",23,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"new","","Construct a new `Error` of a particular `ErrorKind`.",23,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"kind","","Get the kind of this `Error`.",23,null],[11,"description","","",23,null],[11,"fmt","","",23,null],[0,"utils","rulinalg","Linear algebra utils module.",null,null],[5,"dot","rulinalg::utils","Compute dot product of two slices.",null,null],[5,"unrolled_sum","","Unrolled sum",null,null],[5,"in_place_vec_bin_op","","Vectorized binary operation applied to two slices.\nThe first argument should be a mutable slice which will\nbe modified in place to prevent new memory allocation.",null,null],[5,"vec_bin_op","","Vectorized binary operation applied to two slices.",null,null],[5,"vec_sum","","Compute vector sum of two slices.",null,null],[5,"vec_sub","","Compute vector difference two slices.",null,null],[5,"ele_mul","","Computes elementwise multiplication.",null,null],[5,"ele_div","","Computes elementwise division.",null,null],[5,"argmax","","Find argmax of slice.",null,null],[5,"argmin","","Find argmin of slice.",null,null],[5,"find","","Find index of value in slice.",null,null],[0,"vector","rulinalg","The vector module.",null,null],[3,"Vector","rulinalg::vector","The Vector struct.",null,null],[11,"index","","",24,null],[11,"index_mut","","",24,null],[11,"add","","",24,null],[11,"add","","",24,null],[11,"mul","","",24,null],[11,"mul","","",24,null],[11,"sub","","",24,null],[11,"sub","","",24,null],[11,"div","","",24,null],[11,"div","","",24,null],[11,"rem","","",24,null],[11,"rem","","",24,null],[11,"bitand","","",24,null],[11,"bitand","","",24,null],[11,"bitor","","",24,null],[11,"bitor","","",24,null],[11,"bitxor","","",24,null],[11,"bitxor","","",24,null],[11,"add","","",24,null],[11,"add","","",24,null],[11,"sub","","",24,null],[11,"sub","","",24,null],[11,"rem","","",24,null],[11,"rem","","",24,null],[11,"bitand","","",24,null],[11,"bitand","","",24,null],[11,"bitor","","",24,null],[11,"bitor","","",24,null],[11,"bitxor","","",24,null],[11,"bitxor","","",24,null],[11,"neg","","",24,null],[11,"not","","",24,null],[11,"add_assign","","",24,null],[11,"add_assign","","",24,null],[11,"sub_assign","","",24,null],[11,"sub_assign","","",24,null],[11,"div_assign","","",24,null],[11,"div_assign","","",24,null],[11,"mul_assign","","",24,null],[11,"mul_assign","","",24,null],[11,"rem_assign","","",24,null],[11,"rem_assign","","",24,null],[11,"bitand_assign","","",24,null],[11,"bitand_assign","","",24,null],[11,"bitor_assign","","",24,null],[11,"bitor_assign","","",24,null],[11,"bitxor_assign","","",24,null],[11,"bitxor_assign","","",24,null],[11,"add_assign","","",24,null],[11,"add_assign","","",24,null],[11,"sub_assign","","",24,null],[11,"sub_assign","","",24,null],[11,"rem_assign","","",24,null],[11,"rem_assign","","",24,null],[11,"bitand_assign","","",24,null],[11,"bitand_assign","","",24,null],[11,"bitor_assign","","",24,null],[11,"bitor_assign","","",24,null],[11,"bitxor_assign","","",24,null],[11,"bitxor_assign","","",24,null],[11,"new","","Constructor for Vector struct.",24,{"inputs":[{"name":"u"}],"output":{"name":"vector"}}],[11,"from_fn","","Constructor for Vector struct that takes a function `f`\nand constructs a new vector such that `V_i = f(i)`,\nwhere `i` is the index.",24,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"vector"}}],[11,"size","","Returns the size of the Vector.",24,null],[11,"data","","Returns a non-mutable reference to the underlying data.",24,null],[11,"mut_data","","Returns a mutable slice of the underlying data.",24,null],[11,"into_vec","","Consumes the Vector and returns the Vec of data.",24,null],[11,"iter","","Returns an iterator over the Vector&#39;s data.",24,null],[11,"iter_mut","","Returns an iterator over mutable references to the Vector&#39;s data.",24,null],[11,"get_unchecked","","Returns a pointer to the element at the given index, without doing\nbounds checking.",24,null],[11,"get_unchecked_mut","","Returns an unsafe mutable pointer to the element at the given index,\nwithout doing bounds checking.",24,null],[11,"into","","",24,null],[11,"into_iter","","",24,null],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Displays the Vector.",24,null],[11,"clone","","Clones the Vector.",24,null],[11,"apply","","Applies a function to each element in the vector.",24,null],[11,"argmax","","Find the argmax of the Vector.",24,null],[11,"argmin","","Find the argmin of the Vector.",24,null],[11,"select","","Select elements from the Vector and form a new Vector from them.",24,null],[11,"zeros","","Constructs Vector of all zeros.",24,{"inputs":[{"name":"usize"}],"output":{"name":"vector"}}],[11,"ones","","Constructs Vector of all ones.",24,{"inputs":[{"name":"usize"}],"output":{"name":"vector"}}],[11,"dot","","Compute dot product with specified Vector.",24,null],[11,"sum","","The sum of the vector.",24,null],[11,"elemul","","The elementwise product of two vectors.",24,null],[11,"elediv","","The elementwise division of two vectors.",24,null],[11,"norm","","Compute vector norm for vector.",24,null],[11,"metric","","Compute metric distance between two vectors.",24,null],[11,"mean","","The mean of the vector.",24,null],[11,"variance","","The variance of the vector.",24,null],[11,"fmt","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"hash","","",24,null],[0,"ulp","rulinalg","Tools for ULP-based comparison of floating point numbers.",null,null],[4,"UlpComparisonResult","rulinalg::ulp","Represents the result of an ULP-based comparison between two floating point numbers.",null,null],[13,"ExactMatch","","Signifies an exact match between two floating point numbers.",25,null],[13,"Difference","","The difference in ULP between two floating point numbers.",25,null],[13,"IncompatibleSigns","","The two floating point numbers have different signs,\nand cannot be compared in a meaningful way.",25,null],[13,"Nan","","One or both of the two floating point numbers is a NaN,\nin which case the ULP comparison is not meaningful.",25,null],[8,"Ulp","","Floating point types for which two instances can be compared for Unit in the Last Place (ULP) difference.",null,null],[10,"ulp_diff","","Returns the difference between two floating point numbers, measured in ULP.",26,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ulpcomparisonresult"}}],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[0,"norm","rulinalg","The norm module",null,null],[3,"Euclidean","rulinalg::norm","The Euclidean norm",null,null],[4,"Lp","","The Lp norm",null,null],[13,"Infinity","","The L-infinity norm (supremum)",27,null],[13,"Integer","","The Lp norm where p is an integer",27,null],[13,"Float","","The Lp norm where p is a float",27,null],[8,"VectorNorm","","Trait for vector norms",null,null],[10,"norm","","Computes the vector norm.",28,null],[8,"VectorMetric","","Trait for vector metrics.",null,null],[10,"metric","","Computes the metric distance between two vectors.",29,null],[8,"MatrixNorm","","Trait for matrix norms.",null,null],[10,"norm","","Computes the matrix norm.",30,null],[8,"MatrixMetric","","Trait for matrix metrics.",null,null],[10,"metric","","Computes the metric distance between two matrices.",31,null],[11,"fmt","","",32,null],[11,"norm","","",32,null],[11,"norm","","",32,null],[11,"fmt","","",27,null],[11,"norm","","",27,null],[11,"norm","","",27,null],[14,"vector","rulinalg","The `vector!` macro enables easy construction of small vectors.",null,null],[14,"matrix","","The `matrix!` macro enables easy construction of small matrices.",null,null],[14,"assert_matrix_eq","","Compare matrices for exact or approximate equality.",null,null],[14,"assert_vector_eq","","Compare vectors for exact or approximate equality.",null,null],[11,"is_empty","rulinalg::matrix","Returns true if the matrix contais no elements",20,null],[11,"as_slice","","Returns a `MatrixSlice` over the whole matrix.",20,null],[11,"get_unchecked","","Get a reference to a point in the matrix without bounds checking.",20,null],[11,"col","","Returns the column of a matrix at the given index.\n`None` if the index is out of bounds.",20,null],[11,"col_unchecked","","Returns the column of a matrix at the given\nindex without doing a bounds check.",20,null],[11,"row","","Returns the row of a matrix at the given index.",20,null],[11,"row_unchecked","","Returns the row of a matrix at the given index without doing unbounds checking",20,null],[11,"iter","","Returns an iterator over the matrix data.",20,null],[11,"row_iter","","Iterate over the rows of the matrix.",20,null],[11,"diag_iter","","Iterate over diagonal entries",20,null],[11,"sum_rows","","The sum of the rows of the matrix.",20,null],[11,"sum_cols","","The sum of the columns of the matrix.",20,null],[11,"norm","","Compute given matrix norm for matrix.",20,null],[11,"metric","","Compute the metric distance between two matrices.",20,null],[11,"sum","","The sum of all elements in the matrix",20,null],[11,"min","","The min of the specified axis of the matrix.",20,null],[11,"max","","The max of the specified axis of the matrix.",20,null],[11,"into_matrix","","Convert the matrix struct into a owned Matrix.",20,null],[11,"select_rows","","Select rows from matrix",20,null],[11,"select_cols","","Select columns from matrix",20,null],[11,"elemul","","The elementwise product of two matrices.",20,null],[11,"elediv","","The elementwise division of two matrices.",20,null],[11,"select","","Select block matrix from matrix",20,null],[11,"hcat","","Horizontally concatenates two matrices. With self on the left.",20,null],[11,"vcat","","Vertically concatenates two matrices. With self on top.",20,null],[11,"diag","","Extract the diagonal of the matrix",20,null],[11,"transpose","","Tranposes the given matrix",20,null],[11,"is_diag","","Checks if matrix is diagonal.",20,null],[11,"solve_u_triangular","","Solves an upper triangular linear system.",20,null],[11,"solve_l_triangular","","Solves a lower triangular linear system.",20,null],[11,"split_at","","Split the matrix at the specified axis returning two `MatrixSlice`s.",20,null],[11,"sub_slice","","Produce a `MatrixSlice` from an existing matrix.",20,null],[11,"as_mut_slice","","Returns a `MatrixSliceMut` over the whole matrix.",21,null],[11,"get_unchecked_mut","","Get a mutable reference to a point in the matrix without bounds checks.",21,null],[11,"iter_mut","","Returns a mutable iterator over the matrix.",21,null],[11,"col_mut","","Returns a mutable reference to the column of a matrix at the given index.\n`None` if the index is out of bounds.",21,null],[11,"col_unchecked_mut","","Returns a mutable reference to the column of a matrix at the given index\nwithout doing a bounds check.",21,null],[11,"row_mut","","Returns a mutable reference to the row of a matrix at the given index.\n`None` if the index is out of bounds.",21,null],[11,"row_unchecked_mut","","Returns a mutable reference to the row of a matrix at the given index\nwithout doing a bounds check.",21,null],[11,"swap_rows","","Swaps two rows in a matrix.",21,null],[11,"swap_cols","","Swaps two columns in a matrix.",21,null],[11,"row_iter_mut","","Iterate over the mutable rows of the matrix.",21,null],[11,"diag_iter_mut","","Iterate over diagonal entries mutably",21,null],[11,"set_to","","Sets the underlying matrix data to the target data.",21,null],[11,"apply","","Applies a function to each element in the matrix.",21,null],[11,"split_at_mut","","Split the matrix at the specified axis returning two `MatrixSliceMut`s.",21,null],[11,"sub_slice_mut","","Produce a `MatrixSliceMut` from an existing matrix.",21,null],[11,"from","rulinalg::vector","",24,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",24,null],[11,"from","","",24,{"inputs":[{"name":"row"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"rowmut"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"column"}],"output":{"name":"self"}}],[11,"from","","",24,{"inputs":[{"name":"columnmut"}],"output":{"name":"self"}}]],"paths":[[3,"AbsoluteElementwiseComparator"],[3,"UlpElementwiseComparator"],[3,"ExactElementwiseComparator"],[3,"FloatElementwiseComparator"],[8,"ElementwiseComparator"],[4,"Axes"],[4,"DiagOffset"],[3,"Matrix"],[3,"MatrixSlice"],[3,"MatrixSliceMut"],[3,"Row"],[3,"RowMut"],[3,"Column"],[3,"ColumnMut"],[3,"SliceIter"],[3,"SliceIterMut"],[3,"Diagonal"],[3,"DiagonalMut"],[3,"Rows"],[3,"RowsMut"],[8,"BaseMatrix"],[8,"BaseMatrixMut"],[4,"ErrorKind"],[3,"Error"],[3,"Vector"],[4,"UlpComparisonResult"],[8,"Ulp"],[4,"Lp"],[8,"VectorNorm"],[8,"VectorMetric"],[8,"MatrixNorm"],[8,"MatrixMetric"],[3,"Euclidean"]]};
initSearch(searchIndex);
